package com.cloud.cache.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.cloud.cache.PathCacheInfoItem;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "rx_path_cache_data_item".
*/
public class PathCacheInfoItemDao extends AbstractDao<PathCacheInfoItem, String> {

    public static final String TABLENAME = "rx_path_cache_data_item";

    /**
     * Properties of entity PathCacheInfoItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", true, "url");
        public final static Property Path = new Property(1, String.class, "path", false, "path");
        public final static Property TargetPath = new Property(2, String.class, "targetPath", false, "targetPath");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
    }


    public PathCacheInfoItemDao(DaoConfig config) {
        super(config);
    }
    
    public PathCacheInfoItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"rx_path_cache_data_item\" (" + //
                "\"url\" TEXT PRIMARY KEY NOT NULL ," + // 0: url
                "\"path\" TEXT," + // 1: path
                "\"targetPath\" TEXT," + // 2: targetPath
                "\"name\" TEXT);"); // 3: name
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_rx_path_cache_data_item_url ON \"rx_path_cache_data_item\"" +
                " (\"url\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"rx_path_cache_data_item\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PathCacheInfoItem entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String targetPath = entity.getTargetPath();
        if (targetPath != null) {
            stmt.bindString(3, targetPath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PathCacheInfoItem entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
 
        String targetPath = entity.getTargetPath();
        if (targetPath != null) {
            stmt.bindString(3, targetPath);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public PathCacheInfoItem readEntity(Cursor cursor, int offset) {
        PathCacheInfoItem entity = new PathCacheInfoItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // targetPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PathCacheInfoItem entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTargetPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(PathCacheInfoItem entity, long rowId) {
        return entity.getUrl();
    }
    
    @Override
    public String getKey(PathCacheInfoItem entity) {
        if(entity != null) {
            return entity.getUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PathCacheInfoItem entity) {
        return entity.getUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
