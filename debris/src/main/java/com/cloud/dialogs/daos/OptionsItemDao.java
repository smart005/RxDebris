package com.cloud.dialogs.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.cloud.dialogs.options.beans.OptionsItem;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "cl_tb_options".
*/
public class OptionsItemDao extends AbstractDao<OptionsItem, String> {

    public static final String TABLENAME = "cl_tb_options";

    /**
     * Properties of entity OptionsItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "id");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property ParentId = new Property(2, String.class, "parentId", false, "parentId");
        public final static Property Check = new Property(3, boolean.class, "check", false, "check");
    }


    public OptionsItemDao(DaoConfig config) {
        super(config);
    }
    
    public OptionsItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"cl_tb_options\" (" + //
                "\"id\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"name\" TEXT," + // 1: name
                "\"parentId\" TEXT," + // 2: parentId
                "\"check\" INTEGER NOT NULL );"); // 3: check
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_cl_tb_options_id ON \"cl_tb_options\"" +
                " (\"id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"cl_tb_options\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OptionsItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
        stmt.bindLong(4, entity.getCheck() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OptionsItem entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(3, parentId);
        }
        stmt.bindLong(4, entity.getCheck() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OptionsItem readEntity(Cursor cursor, int offset) {
        OptionsItem entity = new OptionsItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentId
            cursor.getShort(offset + 3) != 0 // check
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OptionsItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheck(cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(OptionsItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(OptionsItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OptionsItem entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
